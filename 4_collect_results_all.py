"""
collect all the metrics of different dataset and calculate the mean and std of them.
"""

import numpy as np
import pandas, os, tqdm

path_root = os.path.join("outputs", "unet_c")
dataset_names_sr = [
    "biosr-cpp-sr-1",
    "biosr-cpp-sr-2",
    "biosr-cpp-sr-3",
    "biosr-cpp-sr-4",
    "biosr-cpp-sr-5",
    "biosr-cpp-sr-6",
    "biosr-cpp-sr-7",
    "biosr-cpp-sr-8",
    "biosr-cpp-sr-9",
    "biosr-er-sr-1",
    "biosr-er-sr-2",
    "biosr-er-sr-3",
    "biosr-er-sr-4",
    "biosr-er-sr-5",
    "biosr-er-sr-6",
    "biosr-mt-sr-1",
    "biosr-mt-sr-2",
    "biosr-mt-sr-3",
    "biosr-mt-sr-4",
    "biosr-mt-sr-5",
    "biosr-mt-sr-6",
    "biosr-mt-sr-7",
    "biosr-mt-sr-8",
    "biosr-mt-sr-9",
    "biosr-actin-sr-1",
    "biosr-actin-sr-2",
    "biosr-actin-sr-3",
    "biosr-actin-sr-4",
    "biosr-actin-sr-5",
    "biosr-actin-sr-6",
    "biosr-actin-sr-7",
    "biosr-actin-sr-8",
    "biosr-actin-sr-9",
    "biosr-actin-sr-10",
    "biosr-actin-sr-11",
    "biosr-actin-sr-12",
    "deepbacs-sim-ecoli-sr",
    "deepbacs-sim-saureus-sr",
    "w2s-c0-sr-1",
    "w2s-c0-sr-2",
    "w2s-c0-sr-3",
    "w2s-c0-sr-4",
    "w2s-c0-sr-5",
    "w2s-c0-sr-6",
    "w2s-c0-sr-7",
    "w2s-c1-sr-1",
    "w2s-c1-sr-2",
    "w2s-c1-sr-3",
    "w2s-c1-sr-4",
    "w2s-c1-sr-5",
    "w2s-c1-sr-6",
    "w2s-c1-sr-7",
    "w2s-c2-sr-1",
    "w2s-c2-sr-2",
    "w2s-c2-sr-3",
    "w2s-c2-sr-4",
    "w2s-c2-sr-5",
    "w2s-c2-sr-6",
    "w2s-c2-sr-7",
    # "srcaco2-h2b-sr-8",
    # "srcaco2-h2b-sr-4",
    "srcaco2-h2b-sr-2",
    # "srcaco2-survivin-sr-8",
    # "srcaco2-survivin-sr-4",
    "srcaco2-survivin-sr-2",
    # "srcaco2-tubulin-sr-8",
    # "srcaco2-tubulin-sr-4",
    "srcaco2-tubulin-sr-2",
]
dataset_names_dn = [
    "biosr-cpp-dn-1",
    "biosr-cpp-dn-2",
    "biosr-cpp-dn-3",
    "biosr-cpp-dn-4",
    "biosr-cpp-dn-5",
    "biosr-cpp-dn-6",
    "biosr-cpp-dn-7",
    "biosr-cpp-dn-8",
    "biosr-er-dn-1",
    "biosr-er-dn-2",
    "biosr-er-dn-3",
    "biosr-er-dn-4",
    "biosr-er-dn-5",
    "biosr-mt-dn-1",
    "biosr-mt-dn-2",
    "biosr-mt-dn-3",
    "biosr-mt-dn-4",
    "biosr-mt-dn-5",
    "biosr-mt-dn-6",
    "biosr-mt-dn-7",
    "biosr-mt-dn-8",
    "biosr-actin-dn-1",
    "biosr-actin-dn-2",
    "biosr-actin-dn-3",
    "biosr-actin-dn-4",
    "biosr-actin-dn-5",
    "biosr-actin-dn-6",
    "biosr-actin-dn-7",
    "biosr-actin-dn-8",
    "biosr-actin-dn-9",
    "biosr-actin-dn-10",
    "biosr-actin-dn-11",
    "biosr-actinnl-dn-1",
    "biosr-actinnl-dn-2",
    "biosr-actinnl-dn-3",
    "biosr-actinnl-dn-4",
    "biosr-actinnl-dn-5",
    "biosr-actinnl-dn-6",
    "biosr-actinnl-dn-7",
    "biosr-actinnl-dn-8",
    "biosr+-ccp-dn-1",
    "biosr+-ccp-dn-2",
    "biosr+-ccp-dn-3",
    "biosr+-ccp-dn-4",
    "biosr+-ccp-dn-5",
    "biosr+-ccp-dn-6",
    "biosr+-ccp-dn-7",
    "biosr+-ccp-dn-8",
    "biosr+-er-dn-1",
    "biosr+-er-dn-2",
    "biosr+-er-dn-3",
    "biosr+-er-dn-4",
    "biosr+-er-dn-5",
    "biosr+-er-dn-6",
    "biosr+-actin-dn-1",
    "biosr+-actin-dn-2",
    "biosr+-actin-dn-3",
    "biosr+-actin-dn-4",
    "biosr+-actin-dn-5",
    "biosr+-actin-dn-6",
    "biosr+-actin-dn-7",
    "biosr+-actin-dn-8",
    "biosr+-actin-dn-9",
    "biosr+-actin-dn-10",
    "biosr+-actin-dn-11",
    "biosr+-mt-dn-1",
    "biosr+-mt-dn-2",
    "biosr+-mt-dn-3",
    "biosr+-mt-dn-4",
    "biosr+-mt-dn-5",
    "biosr+-mt-dn-6",
    "biosr+-mt-dn-7",
    "biosr+-mt-dn-8",
    "biosr+-myosin-dn-1",
    "biosr+-myosin-dn-2",
    "biosr+-myosin-dn-3",
    "biosr+-myosin-dn-4",
    "biosr+-myosin-dn-5",
    "biosr+-myosin-dn-6",
    "biosr+-myosin-dn-7",
    "biosr+-myosin-dn-8",
    "care-planaria-dn-1",
    "care-planaria-dn-2",
    "care-planaria-dn-3",
    "care-tribolium-dn-1",
    "care-tribolium-dn-2",
    "care-tribolium-dn-3",
    "deepbacs-ecoli-dn",
    "deepbacs-ecoli2-dn",
    "w2s-c0-dn-1",
    "w2s-c0-dn-2",
    "w2s-c0-dn-3",
    "w2s-c0-dn-4",
    "w2s-c0-dn-5",
    "w2s-c0-dn-6",
    "w2s-c1-dn-1",
    "w2s-c1-dn-2",
    "w2s-c1-dn-3",
    "w2s-c1-dn-4",
    "w2s-c1-dn-5",
    "w2s-c1-dn-6",
    "w2s-c2-dn-1",
    "w2s-c2-dn-2",
    "w2s-c2-dn-3",
    "w2s-c2-dn-4",
    "w2s-c2-dn-5",
    "w2s-c2-dn-6",
    "srcaco2-h2b-dn-8",
    "srcaco2-h2b-dn-4",
    "srcaco2-h2b-dn-2",
    "srcaco2-survivin-dn-8",
    "srcaco2-survivin-dn-4",
    "srcaco2-survivin-dn-2",
    "srcaco2-tubulin-dn-8",
    "srcaco2-tubulin-dn-4",
    "srcaco2-tubulin-dn-2",
    "fmd-confocal-bpae-b-avg2",
    "fmd-confocal-bpae-b-avg4",
    "fmd-confocal-bpae-b-avg8",
    "fmd-confocal-bpae-b-avg16",
    "fmd-confocal-bpae-g-avg2",
    "fmd-confocal-bpae-g-avg4",
    "fmd-confocal-bpae-g-avg8",
    "fmd-confocal-bpae-g-avg16",
    "fmd-confocal-bpae-r-avg2",
    "fmd-confocal-bpae-r-avg4",
    "fmd-confocal-bpae-r-avg8",
    "fmd-confocal-bpae-r-avg16",
    "fmd-confocal-fish-avg2",
    "fmd-confocal-fish-avg4",
    "fmd-confocal-fish-avg8",
    "fmd-confocal-fish-avg16",
    "fmd-confocal-mice-avg2",
    "fmd-confocal-mice-avg4",
    "fmd-confocal-mice-avg8",
    "fmd-confocal-mice-avg16",
    "fmd-twophoton-mice-avg2",
    "fmd-twophoton-mice-avg4",
    "fmd-twophoton-mice-avg8",
    "fmd-twophoton-mice-avg16",
    "fmd-twophoton-bpae-b-avg2",
    "fmd-twophoton-bpae-b-avg4",
    "fmd-twophoton-bpae-b-avg8",
    "fmd-twophoton-bpae-b-avg16",
    "fmd-twophoton-bpae-g-avg2",
    "fmd-twophoton-bpae-g-avg4",
    "fmd-twophoton-bpae-g-avg8",
    "fmd-twophoton-bpae-g-avg16",
    "fmd-twophoton-bpae-r-avg2",
    "fmd-twophoton-bpae-r-avg4",
    "fmd-twophoton-bpae-r-avg8",
    "fmd-twophoton-bpae-r-avg16",
    "fmd-wf-bpae-b-avg2",
    "fmd-wf-bpae-b-avg4",
    "fmd-wf-bpae-b-avg8",
    "fmd-wf-bpae-b-avg16",
    "fmd-wf-bpae-g-avg2",
    "fmd-wf-bpae-g-avg4",
    "fmd-wf-bpae-g-avg8",
    "fmd-wf-bpae-g-avg16",
    "fmd-wf-bpae-r-avg2",
    "fmd-wf-bpae-r-avg4",
    "fmd-wf-bpae-r-avg8",
    "fmd-wf-bpae-r-avg16",
]
dataset_names_dcv = [
    "biosr-cpp-dcv-1",
    "biosr-cpp-dcv-2",
    "biosr-cpp-dcv-3",
    "biosr-cpp-dcv-4",
    "biosr-cpp-dcv-5",
    "biosr-cpp-dcv-6",
    "biosr-cpp-dcv-7",
    "biosr-cpp-dcv-8",
    "biosr-cpp-dcv-9",
    "biosr-er-dcv-1",
    "biosr-er-dcv-2",
    "biosr-er-dcv-3",
    "biosr-er-dcv-4",
    "biosr-er-dcv-5",
    "biosr-er-dcv-6",
    "biosr-mt-dcv-1",
    "biosr-mt-dcv-2",
    "biosr-mt-dcv-3",
    "biosr-mt-dcv-4",
    "biosr-mt-dcv-5",
    "biosr-mt-dcv-6",
    "biosr-mt-dcv-7",
    "biosr-mt-dcv-8",
    "biosr-mt-dcv-9",
    "biosr-actin-dcv-1",
    "biosr-actin-dcv-2",
    "biosr-actin-dcv-3",
    "biosr-actin-dcv-4",
    "biosr-actin-dcv-5",
    "biosr-actin-dcv-6",
    "biosr-actin-dcv-7",
    "biosr-actin-dcv-8",
    "biosr-actin-dcv-9",
    "biosr-actin-dcv-10",
    "biosr-actin-dcv-11",
    "biosr-actin-dcv-12",
    "biosr-actinnl-dcv-1",
    "biosr-actinnl-dcv-2",
    "biosr-actinnl-dcv-3",
    "biosr-actinnl-dcv-4",
    "biosr-actinnl-dcv-5",
    "biosr-actinnl-dcv-6",
    "biosr-actinnl-dcv-7",
    "biosr-actinnl-dcv-8",
    "biosr-actinnl-dcv-9",
    # "care-synthe-granules-dcv",
    # "care-synthe-tubulin-dcv",
    # "care-synthe-tubulin-gfp-dcv",
    "deepbacs-sim-ecoli-dcv",
    "deepbacs-sim-saureus-dcv",
    "w2s-c0-dcv-1",
    "w2s-c0-dcv-2",
    "w2s-c0-dcv-3",
    "w2s-c0-dcv-4",
    "w2s-c0-dcv-5",
    "w2s-c0-dcv-6",
    "w2s-c0-dcv-7",
    "w2s-c1-dcv-1",
    "w2s-c1-dcv-2",
    "w2s-c1-dcv-3",
    "w2s-c1-dcv-4",
    "w2s-c1-dcv-5",
    "w2s-c1-dcv-6",
    "w2s-c1-dcv-7",
    "w2s-c2-dcv-1",
    "w2s-c2-dcv-2",
    "w2s-c2-dcv-3",
    "w2s-c2-dcv-4",
    "w2s-c2-dcv-5",
    "w2s-c2-dcv-6",
    "w2s-c2-dcv-7",
]
dataset_names_iso = [
    # "care-drosophila-iso",
    # "care-retina0-iso",
    # "care-retina1-iso",
    "care-liver-iso",
]

# dataset_names, suffix = dataset_names_sr, "_sr"
# dataset_names, suffix = dataset_names_dn, "_dn"
# dataset_names, suffix = dataset_names_dcv, "_dcv"
dataset_names, suffix = dataset_names_iso, "_iso"

num_dataset = len(dataset_names)
print("Number of dataset:", num_dataset)
metrics_name = ["PSNR", "SSIM", "ZNCC"]

for _, metric_name in enumerate(metrics_name):
    writer = pandas.ExcelWriter(
        os.path.join(path_root, metric_name + suffix + ".xlsx"),
        engine="xlsxwriter",
    )
    data_analysis_frame = pandas.DataFrame()

    pbar = tqdm.tqdm(total=num_dataset, desc=metric_name, ncols=80)
    for i in range(num_dataset):
        # read excel of result from a single dataset
        data_frame = pandas.read_excel(
            os.path.join(path_root, dataset_names[i], "metrics.xlsx"),
            sheet_name=metric_name,
        )
        methods = list(data_frame.columns[1:])

        # add inexistent methods
        methods_all = list(data_analysis_frame.columns)
        if "dataset-name" not in methods_all:
            data_analysis_frame.insert(
                data_analysis_frame.shape[-1], "dataset-name", value=""
            )
        for meth in methods:
            for name in [meth + "-mean", meth + "-std", meth + "-n"]:
                if name not in methods_all:
                    data_analysis_frame.insert(
                        data_analysis_frame.shape[-1], name, value=""
                    )

        # add value

        idx = len(data_analysis_frame)
        data_analysis_frame.loc[idx, "dataset-name"] = dataset_names[i]

        n = data_frame[methods[0]].shape[0]
        for meth in methods:
            mean = data_frame[meth].mean().astype(np.float32)
            std = data_frame[meth].std().astype(np.float32)
            data_analysis_frame.loc[idx, meth + "-mean"] = mean
            data_analysis_frame.loc[idx, meth + "-std"] = std
            data_analysis_frame.loc[idx, meth + "-n"] = n
        pbar.update(1)
    data_analysis_frame.to_excel(writer, index=False)
    writer.close()
    pbar.close()
